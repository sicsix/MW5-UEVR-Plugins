# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

cmake_minimum_required(VERSION 3.15)

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
	message(FATAL_ERROR "In-tree builds are not supported. Run CMake from a separate directory: cmake -B build")
endif()

set(CMKR_ROOT_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(CMKR_ROOT_PROJECT ON)

	# Bootstrap cmkr and automatically regenerate CMakeLists.txt
	include(cmkr.cmake OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)
	if(CMKR_INCLUDE_RESULT)
		cmkr()
	endif()

	# Enable folder support
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)

	# Create a configure-time dependency on cmake.toml to improve IDE support
	configure_file(cmake.toml cmake.toml COPYONLY)
endif()

add_compile_options($<$<CXX_COMPILER_ID:MSVC>:/MP>)

project(MW5-UEVR-Plugins)

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /MP")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP")

set(ASMJIT_STATIC ON CACHE BOOL "" FORCE)

if ("${CMAKE_BUILD_TYPE}" MATCHES "Release")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /MT")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MT")

    # Statically compile runtime
    string(REGEX REPLACE "/MD" "/MT" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
    string(REGEX REPLACE "/MD" "/MT" CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
    string(REGEX REPLACE "/MD" "/MT" CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}")
    string(REGEX REPLACE "/MD" "/MT" CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE}")

    message(NOTICE "Building in Release mode")
endif()

set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")

#add_subdirectory(dependencies/submodules/UESDK)

# Target: HeadAim
set(HeadAim_SOURCES
	"src/head_aim/HeadAim.cpp"
	cmake.toml
)

add_library(HeadAim SHARED)

target_sources(HeadAim PRIVATE ${HeadAim_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${HeadAim_SOURCES})

target_compile_features(HeadAim PUBLIC
	cxx_std_23
)

target_include_directories(HeadAim PUBLIC
	"include/"
	"ext/uevr/include/"
	"ext/glm/"
)

# Target: MechShakerBridge
set(MechShakerBridge_SOURCES
	"src/mechshaker_bridge/MechShakerBridge.cpp"
	cmake.toml
)

add_library(MechShakerBridge SHARED)

target_sources(MechShakerBridge PRIVATE ${MechShakerBridge_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${MechShakerBridge_SOURCES})

target_compile_features(MechShakerBridge PUBLIC
	cxx_std_23
)

target_include_directories(MechShakerBridge PUBLIC
	"include/"
	"ext/uevr/include/"
	"ext/glm/"
)

set(CMKR_TARGET MechShakerBridge)
add_custom_command(
    TARGET HeadAim POST_BUILD
    COMMAND powershell.exe -NoProfile -ExecutionPolicy Bypass -File "${CMAKE_SOURCE_DIR}/copy_with_retry.ps1" -sourcePath "${CMAKE_SOURCE_DIR}/build/Release/HeadAim.dll" -destPath "%APPDATA%/UnrealVRMod/MechWarrior-Win64-Shipping/plugins/HeadAim.dll")
add_custom_command(
    TARGET MechShakerBridge POST_BUILD
    COMMAND powershell.exe -NoProfile -ExecutionPolicy Bypass -File "${CMAKE_SOURCE_DIR}/copy_with_retry.ps1" -sourcePath "${CMAKE_SOURCE_DIR}/build/Release/MechShakerBridge.dll" -destPath "%APPDATA%/UnrealVRMod/MechWarrior-Win64-Shipping/plugins/MechShakerBridge.dll")
